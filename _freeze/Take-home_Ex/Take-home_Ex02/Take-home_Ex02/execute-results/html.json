{
  "hash": "2ad6eac2a617279de0928197d0dad08d",
  "result": {
    "markdown": "---\ntitle: \"Take-home Exercise 2\"\nauthor: \"Jaya George\"\ndate: \"April 30,2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n\n# **1 Overview**\n\nIn this take-home exercise, I will continue my visual analytics journey by selecting one of my classmate[ Take-Home Exercise1](https://hafeszsidek.netlify.app/take-home_ex/take-home_ex01/take-home_ex01) and critic the submission in terms of **clarity** and **aesthetics.**\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse,ggplot2,readr,dplyr,lubridate,stringr)\n```\n:::\n\n\n# **2 Data Preparation and installing packages**\n\nFollowing the preparation steps done by my classmate to reading in the input data and loading the required packages.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis_1 <- read_csv(\"data/ResidentialTransaction20240308160536.csv\")\nrealis_2 <- read_csv(\"data/ResidentialTransaction20240308160736.csv\")\nrealis_3 <- read_csv(\"data/ResidentialTransaction20240308161009.csv\")\nrealis_4 <- read_csv(\"data/ResidentialTransaction20240308161109.csv\")\nrealis_5 <- read_csv(\"data/ResidentialTransaction20240414220633.csv\")\nrealis <- bind_rows(realis_1, realis_2, realis_3, realis_4, realis_5)\n```\n:::\n\n\n# **3 Data Wrangling**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis$`Sale Date` <- as.Date(realis$`Sale Date`, format = \"%d %b %Y\")\nrealis$`Nett Price($)` <- as.numeric(gsub(\"[^0-9.]\", \"\", realis$`Nett Price($)`))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrealis2024Q1 <- realis %>%\n  filter(year(`Sale Date`) == 2024 & quarter(`Sale Date`) == 1)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNumber_of_Units_by_Property_Type <- realis2024Q1 %>%\n  group_by(`Property Type`) %>%\n  summarise(`Total Number of Units` = sum(`Number of Units`))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nNumber_of_Units_by_Property_Type <- Number_of_Units_by_Property_Type %>%\n  arrange(desc(`Total Number of Units`)) %>%\n  mutate(`Property Type` = factor(`Property Type`, levels = `Property Type`))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#Determine the address unit level.\nrealis2024Q1 <- realis2024Q1 %>%\n  mutate(\"Floor Level\" = if_else(str_detect(Address, '#'),\n                                   str_trim(str_extract(str_split(Address, \"#\", simplify = TRUE)[, 2], \"^[^\\\\-]*\")),\n                                   \"N.A.\"))\n\n#Determine the address unit level category (Low, middle or high).\nrealis2024Q1 <- realis2024Q1 %>%\n  mutate(`Floor Level Category` = case_when(\n    `Property Type` %in% c(\"Terrace House\", \"Semi-Detached House\", \"Detached House\") ~ \"N.A.\",\n    `Floor Level` == \"N.A.\" ~ \"Low\",\n    as.integer(`Floor Level`) <= 5 ~ \"Low\",\n    as.integer(`Floor Level`) <= 10 ~ \"Middle\",\n    TRUE ~ \"High\"\n  ))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate counts by Property Type and Floor Level Category\ncount_by_type_and_floor <- realis2024Q1 %>%\n  group_by(`Property Type`, `Floor Level Category`) %>%\n  summarise(Count = n(), .groups = 'drop')  # Use .groups='drop' to prevent regrouping\n\n# View the resulting data frame\nprint(count_by_type_and_floor)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 12 × 3\n   `Property Type`       `Floor Level Category` Count\n   <chr>                 <chr>                  <int>\n 1 Apartment             High                     698\n 2 Apartment             Low                      669\n 3 Apartment             Middle                   485\n 4 Condominium           High                     650\n 5 Condominium           Low                      706\n 6 Condominium           Middle                   502\n 7 Detached House        N.A.                      40\n 8 Executive Condominium High                     240\n 9 Executive Condominium Low                      275\n10 Executive Condominium Middle                   328\n11 Semi-Detached House   N.A.                      93\n12 Terrace House         N.A.                     216\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reorder levels of 'Property Type' alphabetically\nrealis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`, levels = c(\"Apartment\",\"Condominium\",\"Terrace House\", \"Semi-Detached House\",\"Detached House\",\"Executive Condominium\"))\n\n# Reorder levels of 'Floor Level Category' by \"High\", \"Middle\", \"Low\"\nrealis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`, levels = c(\"High\", \"Middle\", \"Low\"))\n\n# Create the boxplot using ggplot2\nggplot(realis2024Q1, aes(x = `Property Type`, y = `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"N.A.\" = \"gray\", \"Low\" = \"blue1\", \"Middle\" =\"green\", \"High\" = \"red\")) +\n  labs(x = \"Property Type\", y = \"Unit Price ($ PSM)\", fill = \"Floor Level Category\") +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1))\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\n## **4 Critique 1**\n\n## **4.1 Original Design**\n\nThe original design is shown below:\n\n![](images/clipboard-4162572537.png)\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure the 'realis2024Q1' data frame is loaded and appropriate libraries are available\nlibrary(ggplot2)\nlibrary(scales)\nlibrary(RColorBrewer)\n\ncolors <- brewer.pal(4, \"Set2\")\n\n# Reorder the levels of 'Property Type' alphabetically\nrealis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`,\n                                       levels = c(\"Apartment\", \"Condominium\", \"Executive Condominium\",\"Terrace House\", \"Semi-Detached House\", \"Detached House\"))\n\n# Reorder levels of 'Floor Level Category' in a specified order\nrealis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`,\n                                              levels = c(\"Low\", \"Middle\",\"High\" ))\n\n# Create the boxplot using ggplot2\nggplot(realis2024Q1, aes(y = `Property Type`, x= `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +\n  geom_boxplot(position = position_dodge2(preserve = \"single\")\n    #varwidth=TRUE,color = \"black\", fatten = 2,#aes(colour = `Floor Level Category`),\n    #width = 0.5,\n  # position=\"dodge2\",\n   # position = position_dodge(width = 0.15)\n  ) +\n   scale_fill_manual(values = setNames(colors, c(\"High\", \"Middle\", \"Low\", \"N.A.\")))+\n  #scale_fill_manual(values = c(\"High\" = \"lightblue\", \"Middle\" =\"lightgreen\", \"Low\" = \"red1\", \"N.A.\" = \"gray\")) +\n  labs(title = \" Property Types: Floorwise price comparison\", hjust = 0.8,\n       y = \"Property Type\",\n       x = \"Unit Price ($ PSM)\",\n       fill = \"Floor Level Category\") +\n  #theme_minimal() +\n  scale_y_discrete(labels = label_wrap_gen(width = 10)) +\n#theme_minimal() +\n  theme(\n        legend.position = \"top\",\n        legend.box = \"horizontal\",  # Aligns legend items horizontally\n        legend.title = element_text(hjust = 0.9,size = 16, face = \"bold\"), # Styles for legend title\n        legend.text = element_text(size = 20), # Styles for legend text\n        plot.title = element_text(hjust = 0.5,face = \"bold\", size = 20),\n        legend.key.size = unit(1.5, \"lines\"),\n        axis.text.x = element_text(size = 18),\n        axis.text.y = element_text(size = 18),\n        axis.title.y = element_blank(),\n        axis.title.x=element_text(size=17,face=\"bold\"),\n        panel.grid.minor = element_blank(),  # Remove minor grid lines for a cleaner look\n        panel.background = element_rect(fill = \"white\", colour = \"gray\"),\n        plot.margin = unit(c(1, 1, 1, 1), \"cm\")  # Set uniform plot margins\n        #axis.title.y=element_text(size=18,face=\"bold\")\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-10-1.png){width=1440}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Ensure the 'realis2024Q1' data frame is loaded and appropriate libraries are available\nlibrary(ggplot2)\n\n# Reorder the levels of 'Property Type' alphabetically\nrealis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`,\n                                       levels = c(\"Apartment\", \"Condominium\", \"Executive Condominium\",\"Terrace House\", \"Semi-Detached House\", \"Detached House\"))\n\n# Reorder levels of 'Floor Level Category' in a specified order\nrealis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`,\n                                              levels = c(\"High\", \"Middle\", \"Low\"))\n\n# Create the boxplot using ggplot2\nggplot(realis2024Q1, aes(y = `Property Type`, x = `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +\n  geom_boxplot() +\n  scale_fill_manual(values = c(\"High\" = \"lightgreen\", \"Middle\" =\"lightblue\", \"Low\" = \"yellow\", \"N.A.\" = \"gray\")) +\n  labs(x = \"Property Type\", y = \"Unit Price ($ PSM)\", fill = \"Floor Level Category\") +\n  #theme_minimal() +\n  theme(axis.text.x = element_text(angle = 0, hjust = 0.5),\n        legend.position = \"bottom\", # Puts legend below the plot\n        legend.box = \"horizontal\",  # Aligns legend items horizontally\n        legend.title = element_text(size = 12, face = \"bold\"), # Styles for legend title\n        legend.text = element_text(size = 12)) # Styles for legend text\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-11-1.png){width=1440}\n:::\n\n```{.r .cell-code}\n   # Rotate x-axis labels for better visibility\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Reorder the levels of 'Property Type' alphabetically\nrealis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`,\n                                       levels = c(\"Apartment\", \"Condominium\", \"Executive Condominium\",\"Terrace House\", \"Semi-Detached House\", \"Detached House\"))\n\n# Reorder levels of 'Floor Level Category' in a specified order\nrealis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`,\n                                              levels = c(\"Low\", \"Middle\",\"High\" ))\n# Calculate total counts for each property type\ntotal_counts <- realis2024Q1 %>%\n  group_by(`Property Type`) %>%\n  summarise(Total = n(), .groups = 'drop')\n\nrealis2024Q1 <- realis2024Q1 %>%\n  left_join(total_counts, by = \"Property Type\")\n\n\n\n# Create the boxplot using ggplot2\nggplot(realis2024Q1, aes(y = `Property Type`, x= `Unit Price ($ PSM)`, fill = `Floor Level Category`), width = sqrt(Total)/sum(sqrt(Total))) +\n  geom_boxplot(#varwidth=TRUE,\n              # position = position_dodge(width = 0.90)\n               position = position_dodge2(preserve = \"single\")) +\n  scale_fill_manual(values = c(\"High\" = \"lightgreen\", \"Middle\" =\"lightblue\", \"Low\" = \"yellow\", \"N.A.\" = \"gray\")) +\n  labs(y = \"Property Type\", x = \"Unit Price ($ PSM)\", fill = \"Floor Level Category\") +\n  #theme_minimal() +\n  scale_y_discrete(labels = label_wrap_gen(width = 10)) +\ntheme_minimal() +\n  theme(\n    axis.text.x = element_text(size = 20,angle = 0, hjust = 1),  # Customize x-axis text size and color\n    axis.text.y = element_text(size = 20),\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 20),\n    axis.title.x = element_text(face = \"bold\", size = 20),\n    #axis.title.y = element_text(face = \"bold\", size = 20),\n    axis.title.y = element_blank(),\n    legend.position = \"top\",\n    legend.box = \"horizontal\", \n    legend.title = element_text(size = 20, face = \"bold\"),\n    legend.text = element_text(size = 20),\n    panel.grid.minor = element_blank(), \n    panel.background = element_rect(fill = \"white\", colour = \"gray\"),\n    plot.margin = unit(c(1, 1, 1, 1), \"cm\")  # Set uniform plot margins\n  )\n```\n\n::: {.cell-output-display}\n![](Take-home_Ex02_files/figure-html/unnamed-chunk-12-1.png){width=1440}\n:::\n:::\n",
    "supporting": [
      "Take-home_Ex02_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}