---
title: "Take-home Exercise 1"
author: "Jaya George"
date: "April 17,2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

## Overview

::: panel-tabset
## Plot

## Code Chunk
:::

### Setting the scene

### Our task

## Getting started

### Load packages

```{r}
library("pacman")
```

```{r}
pacman::p_load(tidyverse, haven,
               ggrepel, ggthemes,
               ggridges, ggdist,
               patchwork, scales)
```

```{r}
library(readr)
```

# *Import data*

```{r}
res_data1 <- read_csv("data/ResidentialTransaction20240308160536.csv",show_col_types = FALSE)
res_data2 <- read_csv("data/ResidentialTransaction20240308160736.csv",show_col_types = FALSE)
res_data3 <- read_csv("data/ResidentialTransaction20240308161009.csv",show_col_types = FALSE)
res_data4 <- read_csv("data/ResidentialTransaction20240308161109.csv",show_col_types = FALSE)
res_data5 <- read_csv("data/ResidentialTransaction20240414220633.csv",show_col_types = FALSE)
res_data <- bind_rows(res_data1, res_data2, res_data3, res_data4, res_data5)

```

### Data pre-processing

```{r}
nrow(res_data)

```

#### **Glimpse of data**

```{r}
glimpse(res_data)
```

#### **Check for duplicates**

```{r}
res_data[duplicated(res_data),]
```

#### **Filtering data for selected variables**

```{r}
res_data_final = res_data %>% 
  select("Property Type", "Area (SQFT)","Unit Price ($ PSF)","Sale Date","Transacted Price ($)","Postal District","Type of Sale","Planning Region","Planning Area","Purchaser Address Indicator") %>%
  rename("Property_Type" = "Property Type",
         "Area_sqft" = "Area (SQFT)",
         "Unit_Price_sqft"="Unit Price ($ PSF)",
         "Sale_Date"="Sale Date",
         "Sale_Price"="Transacted Price ($)",
         "Postal_District"="Postal District",
         "Sale_Type"="Type of Sale",
         "Planning_Region"="Planning Region",
         "Planning_Area"="Planning Area",
         "Purchaser_Address_Indicator"="Purchaser Address Indicator")
```

## **Handling missing values**

```{r}
sum(is.na(res_data_final$Property_Type))
```

```{r}
sum(is.na(res_data_final$Area_sqft))
```

```{r}
sum(is.na(res_data_final$Unit_Price_sqft))
```

```{r}
sum(is.na(res_data_final$Sale_Date))
```

```{r}
sum(is.na(res_data_final$Sale_Price))
```

```{r}
sum(is.na(res_data_final$Postal_District))
```

```{r}
sum(is.na(res_data_final$Sale_Type))
```

```{r}
sum(is.na(res_data_final$Planning_Region))
```

```{r}
sum(is.na(res_data_final$Planning_Area))
```

::: panel-tabset

## Plot

```{r}
#| echo: false
# This chunk generates the plot
ggplot(res_data_final, aes(x = Unit_Price_sqft, y = Property_Type, fill = Property_Type)) + 
  geom_density_ridges() + 
  theme_ridges() + 
  labs(title = 'Ridge Plot', x = 'Value', y = 'Category') 
```

## Code 
```{r} 
#| eval: false

#abc
```
:::


```{r}
# Load necessary libraries
library(ggplot2)
library(ggridges)

# Assume you have a dataframe `df` with a numeric variable `value`
# and a categorical variable `category` that you want to plot

# Basic ridge plot
ggplot(res_data_final, aes(x = Unit_Price_sqft, y = Property_Type, fill = Property_Type)) +
  geom_density_ridges() +
  theme_ridges() + # this is optional, for a better theme tailored for ridge plots
  labs(title = 'Ridge Plot', x = 'Value', y = 'Category')

```



```{r, fig.width=18, fig.height=5}
# Create the box plot
ggplot(res_data_final, aes(x = Property_Type, y = Unit_Price_sqft)) +
  geom_boxplot() +  facet_grid(~ Planning_Region) +
  labs(
    title = "Price Distribution by Property Type (Q1 2024)",
    x = "Property Type",
    y = "Price"
  ) +
  scale_y_continuous(breaks = seq(0, max(res_data_final$Unit_Price_sqft), by = 500))+
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) # Rotate x-axis labels


```

```{r}

transaction_counts <- res_data_final %>%
  count(Property_Type, Sale_Type) 

ggplot(transaction_counts, aes(x = Property_Type, y = n, fill = Sale_Type)) +
  geom_bar(stat = "identity", position = "stack") + 
  labs(
    title = "Transaction Count by Property Type and Sale Type (Q1 2024)",
    x = "Property Type",
    y = "Number of Transactions"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

```{r}

transaction_counts <- res_data_final %>%
  count(Planning_Region,Property_Type) 

ggplot(transaction_counts, aes(x = Planning_Region, y = n, fill = Property_Type)) +
  geom_bar(stat = "identity", position = "stack") + 
  labs(
    title = "Transaction Count by Property Type and Sale Type (Q1 2024)",
    x = "Property Type",
    y = "Number of Transactions"
  ) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) 
```

```{r, fig.width=12, fig.height=6}


transaction_counts <- res_data_final %>%
  count(Planning_Area,Property_Type) 

ggplot(transaction_counts, aes(x = Planning_Area, y = n, fill = Property_Type)) +
  geom_bar(stat = "identity", position = "stack") + 
  labs(
    title = "Transaction Count by Property Type and Sale Type (Q1 2024)",
    x = "Property Type",
    y = "Number of Transactions"
  ) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1)) 
```

```{r}
library(ggplot2)
library(tidyverse)  # Might be needed 

# Assuming your data is in a data frame called 'realis_data' 
# Replace with your actual column names

ggplot(res_data_final, aes(x = Unit_Price_sqft,fill = Sale_Type)) +
  geom_histogram(bins = 30) +  # Adjust 'bins' for desired resolution
  labs(
    x = "Unit Size",
    y = "Count",
    title = "Distribution of Unit Size by Planning Region and Sale Type"
  ) +
  theme(strip.text = element_text(size = 10))  # Adjust strip text size, if needed

```

```{r}
ggplot(data=res_data_final, 
       aes(x = Unit_Price_sqft,colour = Sale_Type)) +
  geom_density()           
```
