---
title: "Take-home Exercise 2"
author: "Jaya George"
date: "April 30,2024"
date-modified: "last-modified"
execute: 
  eval: true
  echo: true
  warning: false
  freeze: true
---

# **1 Overview**

In this take-home exercise, I have selected one of my classmate[ Take-Home Exercise1](https://hafeszsidek.netlify.app/take-home_ex/take-home_ex01/take-home_ex01) in order to critique the submission in terms of **clarity** and **aesthetics.**

Installing R Packages

```{r}
pacman::p_load(tidyverse,ggplot2,readr,dplyr,lubridate,stringr)

```

# **2 Data Preparation and installing packages**

Following the preparation steps done by my classmate to reading in the input data and loading the required packages.

**Load and Consolidate Data**

```{r}
realis_1 <- read_csv("data/ResidentialTransaction20240308160536.csv")
realis_2 <- read_csv("data/ResidentialTransaction20240308160736.csv")
realis_3 <- read_csv("data/ResidentialTransaction20240308161009.csv")
realis_4 <- read_csv("data/ResidentialTransaction20240308161109.csv")
realis_5 <- read_csv("data/ResidentialTransaction20240414220633.csv")
realis <- bind_rows(realis_1, realis_2, realis_3, realis_4, realis_5)

```

# **3 Data Wrangling**

**Amend Character Types**

```{r}
realis$`Sale Date` <- as.Date(realis$`Sale Date`, format = "%d %b %Y")
realis$`Nett Price($)` <- as.numeric(gsub("[^0-9.]", "", realis$`Nett Price($)`))
```

**Filter first quarter of 2024 only**

```{r}
realis2024Q1 <- realis %>%
  filter(year(`Sale Date`) == 2024 & quarter(`Sale Date`) == 1)
```

**Group the data by Property Type and calculate the sum Number of Units for each group**

```{r}
Number_of_Units_by_Property_Type <- realis2024Q1 %>%
  group_by(`Property Type`) %>%
  summarise(`Total Number of Units` = sum(`Number of Units`))
```

**Reorder levels of Property Type based on Total Number of Units**

```{r}
Number_of_Units_by_Property_Type <- Number_of_Units_by_Property_Type %>%
  arrange(desc(`Total Number of Units`)) %>%
  mutate(`Property Type` = factor(`Property Type`, levels = `Property Type`))
```

**Create new columns**

```{r}
#Determine the address unit level.
realis2024Q1 <- realis2024Q1 %>%
  mutate("Floor Level" = if_else(str_detect(Address, '#'),
                                   str_trim(str_extract(str_split(Address, "#", simplify = TRUE)[, 2], "^[^\\-]*")),
                                   "N.A."))

#Determine the address unit level category (Low, middle or high).
realis2024Q1 <- realis2024Q1 %>%
  mutate(`Floor Level Category` = case_when(
    `Property Type` %in% c("Terrace House", "Semi-Detached House", "Detached House") ~ "N.A.",
    `Floor Level` == "N.A." ~ "Low",
    as.integer(`Floor Level`) <= 5 ~ "Low",
    as.integer(`Floor Level`) <= 10 ~ "Middle",
    TRUE ~ "High"
  ))

```

**Plot Boxplot**

```{r}
# Reorder levels of 'Property Type' alphabetically
realis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`, levels = c("Apartment","Condominium","Terrace House", "Semi-Detached House","Detached House","Executive Condominium"))

# Reorder levels of 'Floor Level Category' by "High", "Middle", "Low"
realis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`, levels = c("High", "Middle", "Low"))

# Create the boxplot using ggplot2
ggplot(realis2024Q1, aes(x = `Property Type`, y = `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +
  geom_boxplot() +
  scale_fill_manual(values = c("N.A." = "gray", "Low" = "blue1", "Middle" ="blue3", "High" = "blue4")) +
  labs(x = "Property Type", y = "Unit Price ($ PSM)", fill = "Floor Level Category") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1))
```

## **4 Critique**

## **4.1 Original Design**

The original design is shown below:

![](images/clipboard-26488941.png)

Box plot helps to understand the variability of prices among the different propertytypes.

In property types with different floor categories helps to understand the pricing between the floor categories.

## **4.2 Critique : Clarity and Aesthetics**

### **4.2.1 Clarity**

1.  The boxes are very compressed making it difficult to understand the position of medians
2.  The box sizes are misleading, when we see boxes of varying sizes we would expect the box sizes to reflect the number of data points in that property type. In this case we would expect Terraced house,semi-detatched house and detatched house to have highest numbers,but from data it is clear that it is not the case.

### **4.2.2 Aesthetics**

1.  The x axis labels are lengthy and the 45 degree labels doesn't look aesthetically pleasing
2.  The title is missing for the plot
3.  The color choices for the fills are different tones of blue making it difficult to distinguish between the different categories and in the darkest blue color making it difficult to see the median line

## **5 Sketch of Makeover design**

## 6 Data Viz Make over

### **6.1 Clarity**

1.  Reversing the x and y axes for the box plot will be useful as the categories on the x-axis can be numerical values and the lengthy labels can be on the y axis making it more readable. This will also help to stretch out the boxes thus making the spread and medians more visible and distinguishable.
2.  Changed the order so that the Property types with different floor categories appear together.
3.  Changed the order of Floor category types to appear vertically up

### **6.2 Aesthetics**

1.  Added a title to the plot
2.  Shifted the legend to the top of the plot
3.  Used colours which are easy on the eyes and for more clarity
4.  Wrapped the lengthy y-axis labels
5.  Removed y axis title
6.  Added margin for the plot

### **6.3 Final Design**

## 7. Conclusion

```{r  fig.width=15, fig.height=10}

library(ggplot2)
library(scales)


# Reorder the levels of 'Property Type' 
realis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`,
                                       levels = c("Apartment", "Condominium", "Executive Condominium","Terrace House", "Semi-Detached House", "Detached House"))

# Reorder levels of 'Floor Level Category' in a specified order
realis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`,
                                              levels = c("Low", "Middle","High" ))

# Create the boxplot using ggplot2
ggplot(realis2024Q1, aes(y = `Property Type`, x= `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +
  geom_boxplot(position = position_dodge2(preserve = "single")
    #varwidth=TRUE,
    #width = 0.5,
   # position = position_dodge(width = 0.15)
  ) +
  scale_fill_manual(values = c("High" = "lightgreen", "Middle" ="lightblue", "Low" = "yellow", "N.A." = "gray")) +
  labs(title = " Property Types: Price comparison", hjust = 0.8,
       subtitle = "Categorized by Floor Level",
       y = "Property Type",
       x = "Unit Price ($ PSM)",
       fill = "Floor Level Category") +
  scale_y_discrete(labels = label_wrap_gen(width = 10)) +
  theme(
        legend.position = "top",
        legend.box = "horizontal",  
        legend.title = element_text(hjust = 0.9,size = 16, face = "bold"), 
        legend.text = element_text(size = 20),
        plot.title = element_text(hjust = 0.5,face = "bold", size = 20),
        plot.subtitle = element_text(hjust = 0.5,face = "bold", size = 16),
        legend.key.size = unit(1.5, "lines"),
        axis.text.x = element_text(size = 20),
        axis.text.y = element_text(size = 20),
        axis.title.y = element_blank(),
        axis.title.x=element_text(size=20,face="bold"),
        panel.grid.minor = element_blank(),  # Remove minor grid lines for a cleaner look
        panel.background = element_rect(fill = "white", colour = "gray"),
        plot.margin = unit(c(1, 1, 1, 1), "cm")  # Set uniform plot margins
  )


```

```{r  fig.width=15, fig.height=8}
# Ensure the 'realis2024Q1' data frame is loaded and appropriate libraries are available
library(ggplot2)

# Reorder the levels of 'Property Type' alphabetically
realis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`,
                                       levels = c("Apartment", "Condominium", "Executive Condominium","Terrace House", "Semi-Detached House", "Detached House"))

# Reorder levels of 'Floor Level Category' in a specified order
realis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`,
                                              levels = c("High", "Middle", "Low"))

# Create the boxplot using ggplot2
ggplot(realis2024Q1, aes(y = `Property Type`, x = `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +
  geom_boxplot() +
  scale_fill_manual(values = c("High" = "lightgreen", "Middle" ="lightblue", "Low" = "yellow", "N.A." = "gray")) +
  labs(x = "Property Type", y = "Unit Price ($ PSM)", fill = "Floor Level Category") +
  #theme_minimal() +
  theme(axis.text.x = element_text(angle = 0, hjust = 0.5),
        legend.position = "bottom", # Puts legend below the plot
        legend.box = "horizontal",  # Aligns legend items horizontally
        legend.title = element_text(size = 12, face = "bold"), # Styles for legend title
        legend.text = element_text(size = 12)) # Styles for legend text
   # Rotate x-axis labels for better visibility

```

```{r  fig.width=15, fig.height=10}


# Reorder the levels of 'Property Type' alphabetically
realis2024Q1$`Property Type` <- factor(realis2024Q1$`Property Type`,
                                       levels = c("Apartment", "Condominium", "Executive Condominium","Terrace House", "Semi-Detached House", "Detached House"))

# Reorder levels of 'Floor Level Category' in a specified order
realis2024Q1$`Floor Level Category` <- factor(realis2024Q1$`Floor Level Category`,
                                              levels = c("Low", "Middle","High" ))


# Create the boxplot using ggplot2
ggplot(realis2024Q1, aes(y = `Property Type`, x= `Unit Price ($ PSM)`, fill = `Floor Level Category`)) +
  geom_boxplot(#varwidth=TRUE,
              # position = position_dodge(width = 0.90)
               position = position_dodge2(preserve = "single")) +
  scale_fill_manual(values = c("High" = "lightgreen", "Middle" ="lightblue", "Low" = "yellow", "N.A." = "gray")) +
  labs(y = "Property Type", x = "Unit Price ($ PSM)", fill = "Floor Level Category") +
  scale_y_discrete(labels = label_wrap_gen(width = 10)) +
theme_minimal() +
  theme(
    axis.text.x = element_text(size = 20,angle = 0, hjust = 1),  # Customize x-axis text size and color
    axis.text.y = element_text(size = 20),
    plot.title = element_text(hjust = 0.5, face = "bold", size = 20),
    axis.title.x = element_text(face = "bold", size = 20),
    #axis.title.y = element_text(face = "bold", size = 20),
    axis.title.y = element_blank(),
    legend.position = "top",
    legend.box = "horizontal", 
    legend.title = element_text(size = 20, face = "bold"),
    legend.text = element_text(size = 20),
    panel.grid.minor = element_blank(), 
    panel.background = element_rect(fill = "white", colour = "gray"),
    plot.margin = unit(c(1, 1, 1, 1), "cm")  # Set uniform plot margins
  )


```
